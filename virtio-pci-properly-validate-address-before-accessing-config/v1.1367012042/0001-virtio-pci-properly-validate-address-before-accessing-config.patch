From patches Mon Sep 17 00:00:00 2001
From: Jason Wang <jasowang@redhat.com>
To: Anthony Liguori <aliguori@us.ibm.com>, aliguori@us.ibm.com,
 Petr Matousek <pmatouse@redhat.com>, mst@redhat.com, qemu-devel@nongnu.org,
 "Michael S. Tsirkin" <mst@redhat.com>, Jason Wang <jasowang@redhat.com>,
 oss-security@lists.openwall.com, Kurt Seifried <kseifried@redhat.com>,
 Kurt Seifried <kseifrie@redhat.com>
Cc: Anthony Liguori <aliguori@us.ibm.com>, aliguori@us.ibm.com,
 pmatouse@redhat.com, mst@redhat.com, qemu-devel@nongnu.org,
 "Michael S. Tsirkin" <mst@redhat.com>, Jason Wang <jasowang@redhat.com>,
 oss-security@lists.openwall.com, Kurt Seifried <kseifrie@redhat.com>
Date: Fri, 26 Apr 2013 16:34:02 +0800
Message-id: 1366965244-20542-1-git-send-email-jasowang@redhat.com
Subject: [PATCH 1/3] virtio-pci: properly validate address before accessing
 config

There are several several issues in the current checking:

- The check was based on the minus of unsigned values which can overflow
- It was done after .{set|get}_config() which can lead crash when config_len is
  zero since vdev->config is NULL

Fix this by:

- Validate the address in virtio_pci_config_{read|write}() before
  .{set|get}_config
- Use addition instead minus to do the validation

Cc: Michael S. Tsirkin <mst@redhat.com>
Cc: Petr Matousek <pmatouse@redhat.com>
Signed-off-by: Jason Wang <jasowang@redhat.com>
---
 hw/virtio/virtio-pci.c |    9 +++++++++
 hw/virtio/virtio.c     |   18 ------------------
 2 files changed, 9 insertions(+), 18 deletions(-)

diff --git a/hw/virtio/virtio-pci.c b/hw/virtio/virtio-pci.c
index a1f15a8..7f6c7d1 100644
--- a/hw/virtio/virtio-pci.c
+++ b/hw/virtio/virtio-pci.c
@@ -400,6 +400,10 @@ static uint64_t virtio_pci_config_read(void *opaque, hwaddr addr,
     }
     addr -= config;
 
+    if (addr + size > proxy->vdev->config_len) {
+        return (uint32_t)-1;
+    }
+
     switch (size) {
     case 1:
         val = virtio_config_readb(proxy->vdev, addr);
@@ -430,6 +434,11 @@ static void virtio_pci_config_write(void *opaque, hwaddr addr,
         return;
     }
     addr -= config;
+
+    if (addr + size > proxy->vdev->config_len) {
+        return;
+    }
+
     /*
      * Virtio-PCI is odd. Ioports are LE but config space is target native
      * endian.
diff --git a/hw/virtio/virtio.c b/hw/virtio/virtio.c
index 1c2282c..3397b5e 100644
--- a/hw/virtio/virtio.c
+++ b/hw/virtio/virtio.c
@@ -563,9 +563,6 @@ uint32_t virtio_config_readb(VirtIODevice *vdev, uint32_t addr)
 
     vdev->get_config(vdev, vdev->config);
 
-    if (addr > (vdev->config_len - sizeof(val)))
-        return (uint32_t)-1;
-
     val = ldub_p(vdev->config + addr);
     return val;
 }
@@ -576,9 +573,6 @@ uint32_t virtio_config_readw(VirtIODevice *vdev, uint32_t addr)
 
     vdev->get_config(vdev, vdev->config);
 
-    if (addr > (vdev->config_len - sizeof(val)))
-        return (uint32_t)-1;
-
     val = lduw_p(vdev->config + addr);
     return val;
 }
@@ -589,9 +583,6 @@ uint32_t virtio_config_readl(VirtIODevice *vdev, uint32_t addr)
 
     vdev->get_config(vdev, vdev->config);
 
-    if (addr > (vdev->config_len - sizeof(val)))
-        return (uint32_t)-1;
-
     val = ldl_p(vdev->config + addr);
     return val;
 }
@@ -600,9 +591,6 @@ void virtio_config_writeb(VirtIODevice *vdev, uint32_t addr, uint32_t data)
 {
     uint8_t val = data;
 
-    if (addr > (vdev->config_len - sizeof(val)))
-        return;
-
     stb_p(vdev->config + addr, val);
 
     if (vdev->set_config)
@@ -613,9 +601,6 @@ void virtio_config_writew(VirtIODevice *vdev, uint32_t addr, uint32_t data)
 {
     uint16_t val = data;
 
-    if (addr > (vdev->config_len - sizeof(val)))
-        return;
-
     stw_p(vdev->config + addr, val);
 
     if (vdev->set_config)
@@ -626,9 +611,6 @@ void virtio_config_writel(VirtIODevice *vdev, uint32_t addr, uint32_t data)
 {
     uint32_t val = data;
 
-    if (addr > (vdev->config_len - sizeof(val)))
-        return;
-
     stl_p(vdev->config + addr, val);
 
     if (vdev->set_config)
-- 
1.7.1

